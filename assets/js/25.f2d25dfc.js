(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{305:function(t,n,p){"use strict";p.r(n);var v=p(14),_=Object(v.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"程序与nlp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#程序与nlp"}},[t._v("#")]),t._v(" 程序与NLP")]),t._v(" "),n("ul",[n("li",[t._v("程序：是基于格式化的机器语言（编程语言），预设了特定环境下，对指定的输入给出对应的输出，如机械一般，开灯就必然对应电灯通电这一动作")]),t._v(" "),n("li",[t._v("NLP：是基于灵活多变的人类语言（自然语言），没有特别预设环境，对高度不确定性的输入，给出基于数据库的输出")])]),t._v(" "),n("p",[t._v("程序是为了解决场景化的功能预设好了明确通路的机械��将来如果要基于 NLP，是否还需要传统意义的程序？\n传统程序作为机械执行指令，NLP作为指挥中枢，如汽车与驾驶员，驾驶员变成了自动驾驶，程序员变成了NLP。\n就像自动打字键盘悖论：既然都是机器自己制造的输入，最终输出也是给自己，那还有必要通过复杂的器械，透过人类使用的键盘，去间接给自己创造输出吗？\n回顾一个完整的开发流程：\n甲方 -> 程序员 -> 高级程序语言 -> 低级程序语言 -> 机器指令 -> 硬件\n我们为什么需要有程序语言到指令的过程，本质上还是因为人类需要可读，可读更进一步是为了可控")]),t._v(" "),n("p",[t._v("现在加入了 NLP，就变成了\n甲方 -> 程序员 -> "),n("strong",[t._v("prompt")]),t._v(" -> 高级程序语言 -> 低级程序语言 -> 机器指令 -> 硬件")]),t._v(" "),n("p",[t._v("这个链路里的程序语言存在的价值仍然是可读可控，但是如果引入了机器更自动的自测自修复，是不是就不需要了，可以达到\n甲方 -> 程序员 -> prompt -> 指令 -> 硬件\n这个过程就像自动驾驶，需要的不是一个模拟人类旋转方向盘的机械手臂，而是直接驱动齿轮的电机；\n也像自动打字，不是一个模拟人类手指触发键盘按钮按下的机械，甚至连键盘都不需要，直接程序内部一个字符串赋值。")]),t._v(" "),n("p",[t._v("这个过程仍然需要「程序员」这个概念，是因为一些人是无法以结构化的思维给与机器一个明确可闭环的链路")]),t._v(" "),n("p",[t._v("人对程序的预期，仍然是个确定性的，比如在页面点了点赞的动作，预期是它在页面上任何人看到的都是点赞+1， 而如果屏蔽了 prompt ，实际上可能 AI 给出的动作只是帮你点了一下这个图标，并没有发生后续的服务器通信、数据存储，也就没有真的点赞，对于这部分不透明，天然存在不安全感，对一些看似正确的结果，不一定完全符合预期，这点上不如机器一样可靠")]),t._v(" "),n("p",[t._v("未来新的程序形态会是架构师+代码审核工程师，会架设好一个完整可靠的架构，然后以人类语言向机器发起命令，填充具体代码实现，然后给与对应审阅。这个工作模式，莫名的有点像锤子的 TNT：你吵到我写代码了.jpg")])])}),[],!1,null,null,null);n.default=_.exports}}]);