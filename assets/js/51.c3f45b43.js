(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{331:function(e,t,r){"use strict";r.r(t);var a=r(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"所思-军队还是武侠"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#所思-军队还是武侠"}},[e._v("#")]),e._v(" 所思 - 军队还是武侠")]),e._v(" "),t("p",[e._v("阿里是一家有武侠基因的公司，武艺是基本技能，更多的是要独立的思考和发挥个性，要成为一个独一无二的存在。员工做事情，会被要求思考为什么做、为什么是我做怎么做、怎么做。但是随着公司规模的扩张，并非所有人都喜欢这样去想，会觉得工作无非拿钱干活，为什么需要全身心投入去想这些。另一方面，一些庸碌的 leader 会盲目套用公式，不会根据员工的喜好与阶段，直接生搬硬套方法论，导致逆反情绪。再者，有些人喜欢拿黑话放在嘴边说，不实事求是，因此也就催生了阿里黑话，成为互联网笑柄。\n好处是能够调动愿意思考的人的积极性和主观能动性，我在阿里这些年成长很明显，技术方面可以有自信能站在行业前沿，事情的步调也更踏实有条理。面对业务需求，我会看它的行业同类，会看它的前世今生，会看它的未来发展走向，会思考它在行业中如何做出创新，并寻找突破点，结合个人特质，在其中做出可以引以为豪的技术和业务产出。而放在以前我可能只会埋头开始写代码\n坏处是每个人都过于独立，有些简单的需求会多方挑战难以敏捷迭代。有时候一个很简单的事情，可能就因为它太简单，各方角色觉得从中难以得到有效的业绩产出而拒绝投入，简单的事情反而难推动。大的事情又涉及各方利益，需要最高管理角色给出指挥和利益分配才能展开。有些想要做事情的人，反而不一定能比包装良好的人能获得多。")]),e._v(" "),t("p",[e._v("腾讯是一家自上而下的公司，从我所在部门的一些产品开发思路上看毫无疑问就是由老板决定，然后层层“目标拆解”下去。说得更直白露骨一点，整个团队就是外包制，大leader灵光乍现想发展某个业务，下一级具体规划产品，再下一级成立产品研发团队，再逐步划分到一线开发业务需求。这样的团队需要的是执行力，也就是从产品需求给出到实施完成，需要的不是个人英雄主义，也不需要个人创新和思考，需要的是绝对服从和人力的资源化。\n好处是只要 leader 有个正确的方向（而互联网往往并不缺创意、产品、方向，拿来即可），leader 一句话，整台流水线机器就开始严格运作起来，人在里面都是随处可换、随时可换的零件，并不影响这台流水线机器的运作，只要大 leader 指挥得当，生产效率是非常高的，毕竟码仔们都是面向领导编程。\n坏处是，你可能会在这里看到人月神话，身处其中的员工今天不知道明天要干什么，无论是 OKR 还是 KPI 都无法在这个团队使用，毕竟流水线工人不需要知道也不能知道未来要干什么。每层的小 leader 本质上也是流水线上的一个包工头，连他自己也不一定知道未来要干什么，只比手下能看到的东西多那么一点。在这里，人都是可以替换的，在这个环境下出来的人也是零件的形状，即便逃脱这里也可能是一辈子的零件")]),e._v(" "),t("p",[e._v("阿里太多梦想，培育漫天繁星，却失去了攻城略地的能力。\n腾讯不知梦想，批发厂工码仔，却得到了坚决服从的军队。")])])}),[],!1,null,null,null);t.default=n.exports}}]);