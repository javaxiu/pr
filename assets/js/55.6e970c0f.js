(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{334:function(t,a,n){"use strict";n.r(a);var o=n(14),e=Object(o.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"技术-天下无码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术-天下无码"}},[t._v("#")]),t._v(" 技术 - 天下无码")]),t._v(" "),a("blockquote",[a("p",[t._v("Big data is like teenage sex: everyone talks about it， nobody really knows how to do it， everyone thinks everyone else is doing it， so everyone claims they are doing it")])]),t._v(" "),a("p",[t._v("此处的 Big data 可以替换为 Low-Code ，完全可以说得通，WYSIWYG 的概念也提了很久，但是毕竟软件工程没有银弹，随着各种技术的不断革新，眼看各种低代码平台兴起，然后不了了之。但是今天这个时间我们为什么可以说已经是可以开始去创造新基建了呢？")]),t._v(" "),a("p",[a("strong",[t._v("因为更需要了")])]),t._v(" "),a("p",[t._v("今年疫情期间，部门搞了各种打仗一般急促的事情，首先是很多人了解到的政务钉钉的复工复产申请单、zoom 大火带来的音视频领域战场抢占、办公园区出入园管理系统，各种系统要求在 2 天之内必须上线，人员三班倒加班自不用说，而高效、可协同的问题就摆在眼前了：手写代码，效率能高吗？手写代码，如何能做到 1+1 不小于 2？（做软件工程的人都知道“人月神话”）。事实上我们后来是靠献祭了大把人的秀发扛过来了，按时保障了业务需要。\n于是我们开始更重视高效交付平台，作为我们部门的新基建去打造。更是将新入职的几十号生力军投入到低代码搭建平台 -- UIPaaS 中")]),t._v(" "),a("p",[a("strong",[t._v("因为更成熟了")])]),t._v(" "),a("p",[t._v("成熟的有 3 个层面\n首先第一点是大家的"),a("strong",[t._v("共识")]),t._v("，业务的人们逐渐对自己业务模型的清晰认识，比如音视频业务，zoom 和 腾讯视频 已经从市场上、用户体验上，把模型无限趋同，同时也教育了市场，让大家已经适应并接受了其业务模型。同理 Salesforce 等 ToB 业务都让大家有的抄，有更成熟的大框架，剩下的就是小创新。各个领域都有其已占领市场的佼佼者，也不乏新赛道的开拓者，他们都在塑造领域的模型。\n第二点是"),a("strong",[t._v("模型数字化")]),t._v("。Mendix 有个很惊艳的功能：流程预测，也就是你在创建 bpms 流程的时候，它能够预测你下一步是想要创建一个什么样的节点，而这背后依靠的是大量数据的学习统计。我们今天讲人工智能，讲大数据，其实本质上都是来源于对模型的数字化分析。这点其实也是对第一点的承接。\n第三点是"),a("strong",[t._v("技术框架的成熟")]),t._v("。我现在面试别人的时候会问很多底层技术实现，问性能优化，能回答得上来的真的寥寥无几，但是框架倒是玩得很嗨，这种情况其实我也会给通过。类比汇编和 Java，Java 本质上也是一种框架。懂汇编的是大牛，但是不代表只懂 Java 的就是菜鸡。而现在，我们面试已经不问汇编了，问 Java 和 spring。所以其实我们可以看到一个趋势：随着工具的升级，我们原来需要的是字节级的了如指掌，然后是代码级，然后是框架级，那么下一代必然是业务级。正如今天我们绝不会用汇编写服务器程序一样，某一天我们也会嘲笑搭建业务的人竟然需要徒手写程序。我们用石器造出来铜器，然后用铜器造出来铁器，然后造出来蒸汽、电气，用低等工具造出高等工具的人，必然是时代的革命者。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/yuque/0/2020/png/139763/1594221046732-89158a7b-cb2d-4340-be75-792b9ca69d28.png",alt:"image.png"}})]),t._v(" "),a("p",[a("strong",[t._v("那怎么做hpaPaaS")])]),t._v(" "),a("p",[t._v("新设施图纸 -- 模型。来自领域模型构建出来的业务模型。参与者、参与流程、活动生命周期\n新设施骨架 -- 骨架。基于领域特征构建的技术框架。微内核，只解决领域特征里独有的部分，要问清楚自己，我的业务领域和别的业务领域有什么区别。比如都是 Java 服务器，我做供应链的和人力资源系统的到底有什么不一样的特征，凝练成 3 个关键词，3 个只有供应链有，而人力资源没有的关键词，技术框架的设计就浮于纸面了。\n新基建物料 -- 模块。组件基础、模块基础、技术基础。"),a("strong",[t._v("标准化")]),t._v("，物料只有这一个关键词，标准化。我们看过太多重复造轮子的事情，为什么大家都喜欢造轮子，无非是标准不一样。比如你用木头做，我用铁做，你雕花我刻字。物料应该是一个硬通货，要满足处处可用才叫硬通货。你用 go 做，我用 java 做，你提供 ABC接口 ，我非要给 CDE 接口，这样是永远统一不了的。其实无所谓好坏，谁说秦国的货币就比楚国的更实用了？所以这就是 W3C 存在的意义，就是高通做了这么多年专利流氓的意义。标准化委员会坐在一起讨(撕)论(逼)清楚，然后严格执行，不听话的就小拳拳锤他胸口，不然直接胸口碎大石也行。直接定个规则：重复造轮子且说不清价值的，绩效打低分，谁也犯不着跟钱过不去")]),t._v(" "),a("p",[a("strong",[t._v("那怎么干")]),t._v("\n其实没有几家公司能经得起停工搞基建的。我本人也很反对业务还没有成型的时候就大搞工程。从业务中来，再走回去业务才是正道。比如先从业务系统剥离物料、从业务中总结模型（请记住，一定要找出来3个关键词，不然不叫领域模型）、然后根据业务模型和物料归纳出来最骨干的框架。\n然而往往很多人本末倒置，先做了技术框架，再思考领域特征，然后凭空捏造物料。可怜，可恨。")])])}),[],!1,null,null,null);a.default=e.exports}}]);